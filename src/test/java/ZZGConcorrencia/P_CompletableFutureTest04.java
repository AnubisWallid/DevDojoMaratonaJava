package ZZGConcorrencia;

import ZZGConcorrencia.Dominio.Quote;
import ZZGConcorrencia.Servico.StoreServiceWithDiscount;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class P_CompletableFutureTest04 {
    public static void main(String[] args) {
        StoreServiceWithDiscount service = new StoreServiceWithDiscount();
        searchPricesWithDiscount(service);
        searchPricesWithDiscountAsync(service);

    }

    private static void searchPricesWithDiscount(StoreServiceWithDiscount service) {
        long start = System.currentTimeMillis();
        List<String> stores = new ArrayList<>();
        for (int i = 1; i < 6; i++) {
            stores.add(String.format("Store %d", i));
        }
        /*stores.forEach(s -> System.out.println(service.getPriceSync(s)));*/
        stores.stream()
                .map(service::getPriceSync)//"storeName:price:discountCode"
                .map(Quote::setAttributes)
                .map(service::applyDiscount)
                .forEach(System.out::println);
        long end = System.currentTimeMillis();
        System.out.println(end - start + " ms");
    }

    private static void searchPricesWithDiscountAsync(StoreServiceWithDiscount service) {
        long start = System.currentTimeMillis();
        List<String> stores = new ArrayList<>();
        for (int i = 1; i < 6; i++) {
            stores.add(String.format("Store %d", i));
        }
        List<CompletableFuture<String>> completableFutureList = stores.stream()
                /*Getting price async "storeName:price:discountCode"*/
                .map(s -> CompletableFuture.supplyAsync(() ->
                        service.getPriceSync(s)))
                /*Instantiating a new Quote from the string generated by getPriceSync*/
                .map(cf -> cf.thenApply(Quote::setAttributes))
                /*Composing the first completable future*/
                .map(cf -> cf.thenCompose(quote -> CompletableFuture.supplyAsync(
                                        () -> service.applyDiscount(quote))))
                .collect(Collectors.toList());

        completableFutureList.stream()
                .map(CompletableFuture::join)
                .forEach(System.out::println);

        long end = System.currentTimeMillis();
        System.out.println(end - start + " ms");
    }
}

